MySQL
    基础
        SQL分类
            DDL
                eg: create alter drop rename truncate
            DML 
                eg: select update delete insert 
            DCL 
                eg: commit rollback savepoint grant revoke ...
        dual: 伪表
        数值+字符串, 字符串会被当作0处理
        数值+null=null
        数值/0=null
        union
            可以将多条select语句查询的结果合并组合成单个结果集
            合并时, 两个表对应的列数和数据类型必须相同(比如分库分表查询的时候), 并且相互对应. 各个select语句之间用union/union all关键字分割
            union和union all的区别
                union会去除重复记录
                union all 不会去除重复记录, 全都要
                开发中能用union all就不要用union ⭐️, union要去重, 所以会导致效率变低 
    事务+MVCC
        日志 
            MySQL中的日志
                undolog(回滚日志)
                    作用 
                        为了保证雨"原子性"+MVCC
                redolog(前滚日志)
                    作用 
                        为了方便将数据持久化
                binlog
                    二进制文件
                    作用 
                        为了主从复制
                        做的所有操作都会记录到binlog中, 属于是MySQL级别的日志,默认不开启, 需要手动开启
                relaylog(中继日志)
                    作用 
                        进行主从复制的时候, 从机里存储从主机中拉去过来的binlog文件,就叫做relaylog
                        从机自己也有binlog, 不是直接从主机中拉了binlog之后进行覆盖, 而是先存一份, 叫做relaylog,然后relaylog中的数据再写到binlog
                    主从同步过程
                        master中的有个binlog, 从机中有个IO Thread, 去拉去master中的binlog, binlog到从机中就变成了relaylog, 他不是立马执行, 而是通过一个SQL Thread线程, 去进行回放数据, 回放完成即数据同步完成
                slowlog(慢查询日志)
                    作用 
                        我们可以自定义,超过多长时间的查询操作是慢操作
                        这样MySQL就会把慢查询记录到slowlog中
                errorlog(错误日志)
                    作用 
                        记录mysql执行过程中的错误
            日志归属
                undolog+redolog 归属于innoDB执行引擎的, MyISAM不具备这两日志
                binlog+relaylog+slowlog+errorlog 归属于MySQL Server级别

                InnoDB时, 包含六个日志, MyISAM时,只包含四个系统级别的
        ACID靠什么保证
            原子性
                通过undolog实现, undolog中记录的是历史版本数据
                
                事务开始之前,会记录老版本的数据, 如果事务需要回滚, 会直接恢复到老版本的数据, 回滚就是这样实现的, 当然了, 可能会存在一个历史版本链
                undolog
                    概念
                        回滚日志,在进行insert,update,delete操作的时候,产生方便回滚的日志
                    操作的几个步骤/流程
                        1. 先加排他锁
                        2. 将老数据拷贝到undolog中去
                        3. 修改数据(数据+事务id)
                        4. 新数据的对应指针roll_pointer指向老的数据
                        5. 事务提交, 释放锁
                    undolog会形成一条链, 链首存放的是最新的"旧记录",链尾存放的是最旧的旧记录
                        那undolog会无限大吗? 存放很多很多无限的数据, 不会的, MYSQL会自动删除 purge线程会去清楚
                    删除数据的时候不是物理删除, 只是做了一个标志位
            持久性 
                redolog
                    更新操作是很慢的, 因为数据存在磁盘上, 先从磁盘拿到内存, 更新之后, 再重新写回到磁盘, 中途断电咋办?
                    瓶颈
                        现在软件硬件所有的瓶颈都在IO这一块, 从内存中数据写入到磁盘是很慢的, 因为他是一个随机写入, 涉及到寻址blabla(找到对应的文件, 然后找到对应数据的磁盘地址, 往中间插入/更新), 找到之后然后再写,耗时, 所以这个过程很慢
                        而如果是顺序写, 就是直接追加, 那么就会很快
                            redolog就是顺序写, 直接追加
                    那怎么去解决这个瓶颈呢?⭐️⭐️⭐️
                        我搞一个磁盘文件,专门用来顺序写的, 从内存中更改之后, 直接顺序写入这块磁盘空间, 非常快, 然后再从这块空间慢慢写入到存储数据的磁盘文件中, 这个顺序写的磁盘文件就是redolog
                        内存---1--->redolog(顺序写)---2--->磁盘数据文件(随机写)
                            如果2过程中断电, 不影响, 数据在redolog中保存了一份, 并且每次mysql重启恢复数据都是从redolog中恢复的
                            如果1过程断电, 那没办法了, 数据就真的丢了
                        这个机制就是WAL(write ahead log), 预写日志⭐️
                redolog和binlog保证一致性⭐️⭐️⭐️
                    为啥这两要保证一致性?
                        binlog是属于MySQL级别的, redolog属于InnoDB的, 那肯定要保证一致性啊, 不一致的话, 主从同步的时候, 从机用的是binlog啊, 你这边更新了, 如果不更新, 主从数据就不一致了嘛
                    那怎么保持一致呢?
                        先写redolog, 再写binlog? 
                            不行 
                            先写redolog, 再写binlog, 那如果写binlog的时候断电了, 那不GG, 从机的数据同步的时候同步的是binlog, 就没法保证主从数据一致了
                        先写binlog,再写redolog?
                            也不行
                            binlog写成功了, 如果写redolog过程中断电导致失败了, 从机可以保证跟binlog中一致, 那MySQL主机恢复的时候是从redolog中恢复的,他的数据就和binlog不一致了, 这样主从数据也是不一致的
                            eg 
                                +1, binlog+1, redolog失败, 那么从机根据主机binlog, 也会+1, 而主机恢复从redolog恢复, 没有+1, GG, 两边数据不一致
                        两阶段提交⭐️⭐️⭐️---通过一个状态位标识实现的
                            redolog(prepare)---1--->binlog---2--->redolog(commit)
                            流程
                                数据从磁盘中拿出来放到内存, 内存中更新...
                                先写redolog, redolog写好之后, 变成prepare状态
                                然后再写binlog, binlog写好之后, 将redolog中的prepare--->commit状态
                                顺序不能变啊
                            过程中断电的情况
                                如果1断电(redolog是prepare状态, 但是写到binlog的时候断电), 那么这个时候恢复, 检查redolog中的状态, 发现是prepare(此时不能恢复, prepare的状态是不能恢复的), 然后就去比对redolog和binlog中的日志内容
                                    一致的话, 就会把redolog的标志变为commit, 这个时候才可以进行恢复
                                    不一致的话, 就会把prepare状态的redolog干掉, 认为他是无效日志
                                如果2断电(binlog也写完了, 但是设置redolog状态为commit时G了), 这个时候再进行恢复, 也是检查redolog中的状态, 发现是prepare(此时不进行恢复),然后比对redolog和binlog中的日志内容
                                    一致,就把redolog的标志设置为commit,然后恢复
                                    不一致的话, 把prepare状态的redolog中内容干掉, 认为他是无效日志
            隔离性
                MVCC
                    概念
                        当前读⭐️
                            读取的永远是"最新的数据",不会读到历史数据
                            触发的操作
                                update,delete,insert,select ... for update, select ... lock in share mode
                        快照读⭐️
                            读取的是历史的数据版本,不是最新的记录
                            触发的操作⭐️
                                select 
                    MySQL中存在的并发场景
                        1. 读读 
                            不存在数据安全问题
                        2. 读写 
                            存在数据安全问题(脏读,幻读,不可重复读)
                            MVCC重点解决这一块⭐️⭐️⭐️, 以不加锁的方式解决数据冲突问题
                        3. 写写 
                            存在数据安全问题(更新丢失问题)
                    MVCC组成部分⭐️⭐️⭐️
                        1. 隐藏字段
                            概念
                                数据库表在定义的时候出了包含我们声明的字段之外,还有一些隐藏字段
                            DB_TRX_ID: ⭐️最近修改的事务ID 创建/最后一次修改这条记录的事务ID, 系统自动设置递增的 
                            DB_ROLL_PTR: 回滚指针  指向了记录的上一个版本
                            DB_ROW_ID: 隐藏主键 如果表没有指定主键的话, 自动生成一个6字节的rowid  如果有指定主键, 那就没有这个隐藏列
                        2. undolog
                            概念
                                回滚日志,在进行insert,update,delete操作的时候,产生方便回滚的日志
                            操作的几个步骤/流程
                                1. 先加排他锁
                                2. 将老数据拷贝到undolog中去
                                3. 修改数据(数据+事务id)
                                4. 新数据的对应指针指向老的数据
                                5. 事务提交, 释放锁
                            undolog会形成一条链, 链首存放的是最新的"旧记录",链尾存放的是最旧的旧记录
                                那undolog会无限大吗? 存放很多很多无限的数据, 不会的, MYSQL会自动删除 purge线程会去清楚
                            删除数据的时候不是物理删除, 只是做了一个标志位
                        3. ReadView(读视图)
                            概念
                                在事务进行"快照读"的时候产生的读视图,保存的并不是实际的数据,而是事务的相关信息
                            三个重要字段
                                trx_list: 当前系统活跃的事务ID列表
                                up_limit_id: 活跃列表中事务ID最小值
                                low_limit_id: 系统尚未分配的下一个事务ID
                    可见性算法
                        首先比较当前select(快照读)的DB_TRX_ID<up_limit_id?
                            <, 则当前事务能读到DB_TRX_ID所在的记录
                                说明当前这条记录对应的最近的一次修改, 是在当前这个时刻所有正在活跃的事务之前, 而且这个修改也已经提交了
                            >=,进行下一个判断
                        如果当前select(快照读)的DB_TRX_ID>=up_limit_id
                            说明最近修改一次的事务在当前ReadView之后, 那么当前肯定也不可见
                        如果当前select(快照读)的DB_TRX_ID<up_limit_id
                            判断DB_TRX_ID是否在活跃事务列表(trx_list)中
                                如果在, 说明此时这个事务还是活跃的, 还没有commit, 那肯定不能读到
                                如果不在, 说明这个事务已经提交了, 那肯定是可以读到的最新的修改之后的数据的
                    结论
                        可重复读在整个事务过程中,只会在第一次"快照读"生成一个ReadView(trx_list,up_limit_id,low_limit_id),以后一直沿用这个ReadView
                        而读已提交, 则是在每一次"select快照读"的时候都会生成一个新的ReadView

                        注意
                            虽然只会生成一个ReadView, 但是对于这条记录, 哪些事务对他更新过, 那个DB_TRX_ID隐藏列是随时变化的, 只要有其他事务更改了并提交, 就会更新这个DB_TRX_ID, 这是属于MySQL表中的隐藏列, 跟隔离级别和ReadView无关, 只不过可重复读因为只会生成一个ReadView, 所以导致即便后面DB_TRX_ID更新了, 那他还是在trx_list中, 所以可重复度也是无法得到最新的值的(此时MySQL认为事务正在进行中)

                            select---快照读
                                如果两个事务同时开启, T2在T1进行第一次select快照读之前更新了对应的记录并且提交了, 那么T1在进行第一次快照读的时候是可以读到最新数据的⭐️⭐️⭐️
                                    因为他第一次生成一个最新的ReadView嘛
                        
                        隔离级别可以理解为是MySQL中的一个显式的属性,一个标志位,用户可以通过设置这个标志位,来达到某些特定的效果

                        不论是RC还是RR,都是不能解决幻读的
                幻读
                    概述
                        刚开始表里只有两条数据, 两个事务T1,T2同时开启, T1第一次查询是两条数据, T2往里面新增了一条数据, 然后提交, 此时因为是可重复读隔离级别, T1再去select快照读, 还是两条数据, 而此时实际上数据库中是有三条, 然后T1去update更新这些记录, 结果显示更新了三条(更新是当前读,可以读到最新数据,所以更新了三条), 这就是快照读出的数据和实际的数据不一样, 就是幻读, 产生了幻想, 我明明快照读是两条, 为啥更新更了三条
                    解决---加锁/间隙锁
                        1. T1读的时候, select ... for update, 加个写锁, 那么T2在进行插入的时候, 就会阻塞住, 直到T1提交才可以插入成功
                        2. 间隙锁
                    产生幻读的根本原因⭐️⭐️⭐️
                        当前读和快照读一起使用, 导致读取到的数据不一致造成的, 如果一个事务中只使用快照读, 那么永远也不会出现幻读
                            当前读会读到最新的数据(update, delete... 就会触发当前读),然后会更新ReadView, 而快照读只会读到之前的历史数据(select), 这样就很有可能导致当前读和快照读的数据不一致
                RR一直都是使用的第一次的快照读吗?
                    不是, 如果第一次快照读之后, 有update, delete...等触发当前读的操作, 那么就会读到最新的数据, 会产生一个新的ReadView
    索引
        小问题
            mysql数据存在什么地方?
                磁盘 
            查询数据比较慢,一般卡在什么地方?
                磁盘IO效率
                提高IO效率, 要么减少次数, 要么增加每一次读取的量
            去磁盘读取数据的时候, 是用多少读取多少吗?
                不是, 是通过磁盘预读
        概念
            局部性原理
                数据和程序都有聚集成群的倾向,同时之前被访问过的数据很有可能再次被查询,空间局部性+时间局部性
            磁盘预读
                内存跟磁盘在发生数据交互的时候, 一般情况下有一个最小的逻辑单元, 称之为"页" datapage
                页的大小由操作系统决定是多大, 一般是4k或者8k, 而我们在进行数据交互的时候, 可以取页的整数倍来进行读取, innnodb存储引擎每次读取数据, 读取16k
        存储引擎
            InnoDB/MyISAM/Memory
        三层B树可以存储多少条记录?
            假设一条记录1kb,索引不占空间, 那么一个节点就是16kb, 可以存16条记录, 三层就是 16*16*16=4096 条记录
            叶子节点不会冗余存储数据, 非叶子节点也存储数据
                要想找到所有元素, 就不仅仅要看叶子节点, 非叶子节点也要看, 因为叶子节点没有存储所有的数据, 不像B+树, 叶子节点所有的冗余数据都存储了
        B+树
            三层的B+树可以存储多少数据?
                假设一个int索引占4字节, 内存地址占6字节, 那么一个非叶子节点就可以存 16384/(4+6) = 1638 ,一个叶子节点可以存16kb/1kb=16条记录, 大致可以存 1600*1600*16= 4000w条数据
                如果是bigint类型的索引占8字节, 内存地址占6字节, 那么一个非叶子节点就可以存 16384/(8+6) = 1170 ,一个叶子节点可以存16kb/1kb=16条记录, 大致可以存 1170*1170*16= 2000w条数据
            如何让三层的B+树存储更多的数据呢?
                内存地址占6字节这个不能变, 那么可以减少的就是索引的占用大小, int占4字节, 如果业务允许的范围内, 降低索引的取值范围, 那么可以用varchar代替, 比如varchar(2)之类的, 只占用两个字节, 这样的话三层就可以存储更多的数据
            B+树每个节点的度Degree是确定的吗?
                不是, 是变化的, 根据数据大小算出来的, 更加灵活
        存储引擎 
            表示不同的数据在磁盘中不同的组织形式
            InnoDB必须要有一个唯一的标识作为聚簇索引
                没有指定主键,就会自己选择一列唯一值作为索引,如果没有, 就会使用隐藏字段rowid作为主键(6字节)
            为什么InnoDB只能有一个聚簇索引?
                如果有多个聚簇索引(索引跟数据是放在一起的),那么就会存在很多ibd文件, 很冗余很重复, 占用了大量的存储空间, 不好管理
                
                但是可以有多个非聚簇索引
            MyISAM都是非聚簇索引
            ⭐️只有聚簇索引的B+树 索引和数据是放在一起的, MyISAM的索引和数据都不是放在一起的
        名词概念⭐️
            回表
                当根据普通索引查询到聚簇索引的key值之后,再根据key去聚簇索引中获取所有行记录, 这个就是回表
                一定要是根据索引查, 然后定位到主键了, 这个才叫回表, 不根据索引查的那个不算回表
            索引覆盖
                就是通过索引就找到了要查询的值, 而无需回表, 这个就是索引覆盖
                eg
                    比如 为name设置索引,id是主键, 然后查询 select id from tb_user where name='zhangsan'; 这样通过name就可以找到 zhangsan和对应的那个主键id, 此时因为只查询id, 不需要其他信息, 所以不用再去回表到主键索引拿其他信息, 直接在name这个普通索引上就找到了需要的值, 所以这个就是索引覆盖
            最左前缀原则
                ...
            索引下推
                MySQL中从上往下分为三层: client--->server--->存储引擎 
                还是 name, age 联合索引
                没有索引下推之前
                    先根据name从存储引擎中获取符合规则的数据, 然后再到server中对age进行过滤
                有索引下推之后
                    直接根据name和age两个条件从存储引擎中获取对应的数据
                就是之前在server层做的计算挪到了存储引擎层, 减少了server层和存储引擎的交互, 提升了效率
        MyISAM和InnoDB的区别
            索引结构不一样
                InnoDB用的是聚簇索引, MyISAM是非聚簇索引
            锁 
                MyISAM只支持表锁, InnoDB支持表锁和行锁
            外键
                MyISAM不支持外键, InnoDB支持外键
            事务 
                MyISAM不支持事务, InnoDB支持事务
            count
                MyISAM有一个count记录当前表的总数据量, InnoDB没有
            表文件 
                MyISAM有三个文件, frm, myd, myi 
                InnoDB有两个文件, frm, idb

        如何创建索引
            alter table 表名 add index 索引名(要设置为索引的字段);
        索引列有重复的, 不影响哈, 有空值最好不要建立索引, 可能会存在乱七八糟的问题
        问题
            为什么推荐使用自增的列作为主键?
                因为使用自增的话, 他只会涉及到往后追加, 不太会去在节点中间进行插入导致分裂, 效率很高
                不推荐使用UUID作为主键
            使用自增的列作为主键, 那删除中间的数据的时候, 空余出来的空间会合并呢还是一直在?
                默认情况下, 刚删除的时候, 这些空间还是一直存在的, 后期如果对表进行优化的时候, 是可能吧这些空余出来的空间给清理掉
            刚开始没设置主键, 而后面设置了主键, 聚簇索引会变吗?
                会的, 刚开始没有设置, 默认会选择一列唯一值/rowid来构建聚簇索引, 后面指定主键之后, 会根据设置的主键去构建聚簇索引
    调优
        MySQL的结构
            客户端
                向数据库发送请求
            MySQL服务端
                连接器: 控制用户的连接
                分析器: 语法分析, 词法分析
                    本质用户发送的就是sql字符串嘛, 那MYSQL要根据关键字比如from 来进行分析查哪张表
                优化器: 优化sql语句用的, 比如联合索引那一块的优化...
                执行器: SQL语句的实际执行组件
            存储引擎
                不同的存放位置, 不同的文件格式
                InnoDB: 磁盘 MyISAM: 磁盘 Memory: 内存
        show profile 对sql语句进行查询剖析 --- 在后边可能逐渐被淘汰, 如果用的MySQL5版本, 仍旧可以用
            开启profiling
                set profiling=1;
                select * from xxx;
                show profiles;
                    会展示之前执行过的sql的执行时间
                show profile; 列出最近一条sql语句每个操作的时间, 优化啊, 发送数据啊blabla
                show profile for query 2; 列出query_id为2的sql语句每个操作的时间
        performance schema
            是MySQL自带的一个数据库, 里面包含了很多表
            不能直接在这个存储引擎中创建表, performance_schema中的表用的是performance_shema存储引擎
            表里面的数据都是不会进行持久化的,保存在内存中,每次mysql关闭/重启之后,数据就没了
        数据类型的优化
            更小的通常更好
            简单就好
                eg: 整型就比字符串好
            尽量避免使用null
            整数类型尽量使用小的
                tinyint(1字节) smallint(2) mediumint(3) int(4) bigint(8字节) 
                磁盘预读, 操作系统的页大小, 4k, 8k, 每次读数据肯定都是读的都是一整个页的数据, 而不是里面抽一部分那种, 使用页可以提高查询效率(要不然每个字节单位都要扫一遍, 那肯定扫一块一块的4k好啊)
                三层的B+树, 要读三个节点, 也就是三个页, 16kb*3
            varchar 和 char 
                varchar是可变的(超过255会使用两个字节存储)
                char是固定长度(最大255)
                    会自动删除尾巴上的空格
                    效率比varchar高, 空间换时间
                    应用场景
                        存储长度波动不大的数据, 如md5摘要
            时间类型
                datetime
                    占8个字节
                    与时区无关, 数据库底层时区配置, 对datetime无效
                    可保存到毫秒级别
                    可保存时间范围大(1000~9999)
                    不要使用字符串存储日期类型, 占用空间大, 损失日期类型函数的便捷性
                timestamp
                    占4个字节
                    时间范围 1970-01-01~2038-01-19
                    精确到秒
                    采用整形存储
                    依赖数据库设置的时区
                    自动更新timestamp列的值
                date
                    占用3个字节, 比datetime, timestamp, int要少
                    使用date类型还可以利用日期函数进行日期之间的计算
                    date类型用于保存1000-01-01~9999-12-31的日期
        如何知道用的是行锁还是表锁?
            InnoDB默认是对索引加锁, 如果操作的时候条件涉及到了索引字段, 那么就是行锁, 如果不是索引字段, 就是表锁
        执行计划
            字段
                id
                    表示select查询的序号, 包含一组数字, 表示查询中执行select子句或者操作表的顺序
                    1. 如果id相同, 那么执行顺序从上到下
                    2. 如果id不同, 如果是子查询, id的序号会递增, id值越大优先级越高, 越先执行
                    3. id相同和不同的, 同时存在: 相同的可以认为是一组, 从上往下执行, 所有组中, id越大, 优先级越高
                select_type
                    查询类型, 用来分辨查询的类型, 是普通查询还是联合查询还是子查询
                    SIMPLE 
                    PRIMARY 最外层的查询标记为PRIMARY
                    UNION 
                    SUBQUERY
                    DEPENDENT SUBQUERY
                type⭐️
                    表示以什么方式去访问我们的数据, 比如全表扫描...
                    性能
                        system>const>eq_ref>ref_fulltext>ref_or_null>index_merge>unique_subquery>index_subquery>range>index>ALL 
                    all
                        全表扫描, 一般出现这样的sql语句而且数据量比较大的时候就需要进行优化了
                    index 
                        全索引扫描, 这个比all号, 主要有两种情况, 一种是当前的查询时索引覆盖, 需要查询的数据就在索引中(select empno from emp), 可以直接获取,,, 第二种是使用了索引进行排序(... order by empno), 这样就避免了再对数据进行重排序了
                    range---最低的标准
                        表示利用索引查询的时候限制了范围, 在指定范围内进行查询, 这样避免了index的全索引扫描, 适用的操作符: = <> > >= < <= between in ...
                    index_subquery
                        利用索引来关联子查询, 不再扫描全表
                    unique_subquery
                        该连接类型类似与index_subquery, 使用的是唯一索引
                    ref
                        使用了非唯一性索引进行数据的查找
                    eq_ref
                        使用唯一性索引进行数据查找 
                    const 
                        这个表至多有一个匹配行
                            explain select * from emp where empno=xxx 
                    system
                        表只有一行记录(等于系统表), 这是const的特例, 平时不会发生
                possible_keys
                    一个表中不可能只有一个索引, 那么在执行sql的时候可能用到的索引有哪些
                key 
                    实际用到的索引 
                key_len
                    索引的长度
                ref 
                    表示索引的哪一列被引用了
                rows 
                    根据表的统计信息和索引使用情况, 大致估算出找出所需记录需要读取的行数, 此参数很重要, 直接反应的sql找了多少数据, 在完成目的的情况下越少越好
                extra(额外信息)
                    using filesort 
                        说明mysql"无法利用索引"进行排序, 只是利用排序算法进行排序, 会使用额外的空间/位置
                        eg: select * from tb_xxx order by xxx; xxx不是索引
                    using temporary 
                        建立临时表来保存中间结果, 查询完成之后把临时表删除
                    using index 
                        这个表示当前的查询时覆盖索引的, 直接从索引中读取数据, 而不用访问数据表---索引覆盖
                        如果同时出现using where 表明索引被用来执行索引键值的查找, 如果没有, 表明索引被用来读取数据(索引覆盖), 而不是真正的查找
                    using where 
                        使用where条件进行过滤
                    using join buffer 
                        使用连接缓存
                    impossible where
                        where语句的结果总是false
        索引优化
            memory存储引擎的索引就是用的hash






        
