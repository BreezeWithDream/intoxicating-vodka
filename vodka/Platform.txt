Platform
    MySQL插件
        四大内置对象
            Executor(接口)
                执行器, 实际执行sql语句的对象
            StatementHandler(接口)
                db会话处理器, 编译/处理sql语句
                实现类
                    PreparedStatementHandler: 对应PreparedStatement ⭐️
                    CallableStatementHandler: 对应CallableStatment ---> 主要用于存储过程
                    SimpleStatementHandler: 对应Statement ---> 存在sql注入的问题
            ParameterHandler(接口)
                处理参数用的
            ResultSetHandler(接口)
                处理结果集的
        装饰者设计模式
            Executor, StatementHandler
        SQL记录插件
        分页插件
            为什么要自定义分页插件? 
                市面上的一些插件不能满足复杂sql的分页, 自定义插件可以进行定制等操作
                BaseStatmentHandler
                    public Statement prepare(Connection connection, Integer transactionTimeout) throws SQLException {...}
                增强这个方法
        maven-pom
            <optional>ture</optional>   杜绝依赖传递
        模块之间解耦合
            模块之间的组件可以通过spring容器来进行解耦合, A模块将组件注册到容器中, B模块从容器中拿到A注册的组件, 这样就不用B模块依赖A模块了
        ⭐️⭐️⭐️
            如果开启了分页插件, 对于普通的sql执行也会进行分页, 比如一个方法里就是要查询所有的数据, 那么此时会查很多次DB, 这样的话, 这些查询也会被分页
            就是只满足一次查询的情况, 多次查询就都会分页
            TODO ken-page gitee有解决方案 
    模块之间的加载顺序, 需要考虑
        A模块以来B,C, 如果BC中都有相同的依赖, 那么加载的顺序就不一定是先加载B还是先加载C, 此时就需要在BC中定义如何冲突时的Bean如何处理, 可以使用@Primary 注解 
    Feign的超时与重试
        超时
            可以配置默认连接和读超时
            也可以配置不同服务自己的超时时间
        重试
            ribbon自带重试, feign默认关闭重试
            配置Feign重试---默认关闭
                注册Retryer接口
                @Bean 
                public Retryer getRetryer(){
                    // 参数1: 重试的间隔时间
                    // 参数2: 重试的最大间隔时间, 默认1s, 重试间隔时间按照一定规则逐渐增大, 但不超过最大间隔时间
                    // 参数3: 最大重试次数, 默认5次, 包含第一次
                    return new Retryer.Default(100,500,2);
                }
            开启重试要保证接口幂等性
        Feign 
            Ribbon
                用来做负载均衡
            Client
                接口, 主要用于真正发送请求
                HttpClient-默认-ClosableHttpClient
                ApacheClient
                OkHttpClient

                底层Client切换
                    eg: 切换为okhttp
                        依赖
                            <dependency>
                                <groupId>io.github.openfeign</groupId>
                                <artifactId>feign-okhttp</artifactId>
                            </dependency>
                        配置
                            feign:
                                okhttp:
                                    enabled: true
                                httpclient:
                                    enabled: false
                                hystrix:
                                    enabled: false
            RequestInterceptor
                请求拦截器
                使之生效
                    @Configuration
                    @EnableFeignClients(basePackages = "com.vodka.business.feign", 
                            defaultConfiguration = RequestParameterInterceptor.class)
                    public static class Feign {

                    }
    Sentinel
        流量控制
            主要是两个指标: QPS+并发线程数
        流控规则
            流控来源
                default 
                    表示来自任何调用者的请求都将会限流统计, 如果超过阈值, 则触发限流
                some_origin_name
                    表示只针对来自特定的调用者才会限流统计
                other
                    表示除了some_origin_name的其余调用者进行流量控制
            阈值类型
                QPS⭐️-居多
                线程数
            流控效果
                快速失败
                WarmUp
                排队等候/匀速派对---漏桶算法
                    假设设置为5个阈值, 等待时间为50ms, 第六个请求来了之后, 就等待, 如果等待了500ms之后这个请求还是没有被处理, 那么就返回失败
            流控模式
                直接
                    当前设定的资源达到流控阈值, 就触发流控
                关联
                    可以设置一个关联资源 /aaa, 如果关联资源/aaa, 达到了流控阈值, 则当前资源也会触发流控
        流控异常处理
            注意
                Web全局异常捕获是只能捕获到进入Controller之后的异常, 进入Controller之前的异常是无法捕获到的, 而流控的异常信息就是进入Controller之前 
            处理
                自定义Handler, 实现BlockingExceptionHandler接口
            分类
                FlowException---流控异常
                DegradeException---熔断降级异常
        Sentinel整合SpringCloud Gateway
            依赖
                <dependency>
                    <groupId>com.alibaba.cloud</groupId>
                    <artifactId>spring-cloud-alibaba-sentinel-gateway</artifactId>
                </dependency>
                <dependency>
                    <groupId>com.alibaba.cloud</groupId>
                    <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
                </dependency>
            流控规则中新增了几项
                按照RouteID进行流控
                    需要在网关配置路由的时候指定id
                    仅仅只针对指定RouteID的请求进行流控, 比如配置了stu, 那就是stu服务相关的请求达到指定阈值之后会触发流控
                    对于其他的没有配置RouteID的请求, 不会进行限流
                按照API分组进行流控
                    API分组可以按照指定规则进行创建
                    支持精准, 前缀, 正则
        熔断降级
            流控主要是用来保护"被调用方", 而熔断降级则主要用于保护"调用方"
            所以流控配置在"被调用方", 熔断降级配置在"调用方"

        熔断策略
            慢调用比例
                如果在一批请求中, 超过指定响应时间的视为慢请求, 慢请求超过一定比例, 则会触发熔断
                最大ReadTimeout
                    超过这个RT, 就会视为慢请求
                比例阈值
                熔断时长
                    熔断超过这个时长之后就会逐渐半开
                最小请求数
                    最低发了多少请求之后才会开启熔断
            异常比例
            异常数

            熔断一旦打开, 熔断器会在调用方对请求进行拦截, 根本就不会发出去, 被调用方是收不到这个请求的, 然后熔断器使用兜底方法进行处理
        指定降级方法
            @SentinelResource(fallback="方法名")
            熔断降级应该配置在网关, 如果配置在微服务的话, 网关进行请求转发, 如果微服务挂掉, 实际上还是会转到微服务, 网关就相当于调用方, 熔断降级是要保护调用方的, 所以网关也要配置熔断降级, 微服务调用其他微服务也要配置
        Sentinel整合Feign远程调用
            熔断降级应该配置在调用方, 但是很多时候调用方并没有被调用方的资源, 怎么搞?
            A调用C, B也调用C, 那么就算进行配置熔断降级, 在A和B中都进行配置吗? 显然不可能

            整合Feign, 就可以解决这两个问题, A,B都会依赖对应的Feign接口, 在Feign接口调用的时候熔断降级也可以解决AB中各自配置的问题

            配置文件中开启
                feign:
                    sentinel:
                        enabled: true
            指定Fallback实现Feign接口, 并在Feign中指定fallback
                @Component
                public class ClsFeignFallback implements ClsFeign {
                    @Override
                    public R<Cls> getClsByCId(Long cId) {
                        return RUtil.create(Codes.DEGRADE_ERROR);
                    }
                }
                @FeignClient(name = "vodka-cls", fallback = ClsFeignFallback.class)
                public interface ClsFeign {
                    @GetMapping("/cls/getByCId")
                    R<Cls> getClsByCId(@RequestParam("cId") Long cId);
                }
        降级和熔断的区别
            降级是, 一旦接口出问题了(被调用方), 就执行降级方法, 返回一些默认值或者提示
            熔断是, 一旦熔断器打开, 后续请求就基本不会再进行调用
            eg 
                降级: 去饭店吃饭, 到了饭店发现饭店关门了, 就直接去旁边摊买个饼
                熔断: 还没出门就知道饭店关门了, 就根本不会出门去饭店
    Sentinel配置规则持久化
        每次重启, 之前的配置都没了
        通过Nacos持久化Sentinel的规则
        pom 
            <dependency>
                <groupId>com.alibaba.csp</groupId>
                <artifactId>sentinel-datasource-nacos</artifactId>
            </dependency>
        流控配置
            [
                {
                    "resource":"/stu/getBySId", // 资源名称
                    "grade":1 ,  // 限流类型, 0: 线程数, 1: QPS
                    "count":1000,   // 限流阈值
                    "limitApp":"default",// 调用来源, default表示不区分来源
                    "strategy":0,    // 限流策略: 0-直接, 1-关联, 2-链路
                    "controlBehavior": 0    // 流控效果, 0-直接拒绝, 1-warm up, 2- 匀速排队
                },
                ...
            ]
        熔断配置
            [
                {
                    "resource":"/Esource",//资源名称
                    "grade":0,//熔断策略，日-慢调用比例 1-异常比例 2-异常数策略
                    "count":500,//慢调用比例模式下为慢调用临界 FT(超出该值计为慢调用〉，异常比例/异常数模式下为对应的阈值
                    "timewindow":10,//熔断时长，单位为 s
                    "slowRatioThreshold":0.5,//慢调用比例阈值，仅慢调用比例模式有效
                    "minRequestAmount":5,//塔断触发的最小请求数，请求数小于该值时即使异常比率超出國值也不会熔断
                    "statIntervalMs":1000//滑动窗口时长（统计单位时间，ms）
                }
            ]
    SEATA
        提供了四种模式: AT(默认),TCC,SAGA, XA
            用的比较多的是前两种, SAGA金融用的多一点, XA需要数据库支持XA模式
            最灵活的就是TCC, 开发成本最高
            AT默认
        角色
            TC: seata服务器就相当于TC 
            TM 
            RM
        Seata也需要注册到注册中心Nacos上
        Seata也可以配置到配置中心上, 集群配置, 每个节点都改很麻烦